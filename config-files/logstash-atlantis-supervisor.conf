#consider maybe adding a pattern for [RemoveExited] see if things failed to remove
#consider maybe adding a pattern for [CMK Inventory]
#consider maybe adding a pattern for [Teardown Logsync]

input { 
   file {
	path => "/var/log/atlantis/supervisor/**"
	start_position => beginning
	type => "atlantis-supervisor"
   }

   file {
	path => "/var/log/atlantis/container/**"
	start_position => beginning
	type => "atlantis-container"
   }
}

filter {

  if [type] == "atlantis-supervisor" {
	grok {

		break_on_match =>  true
		#check if line is rpc cmd line
		match => { 'message'   => '(?<datetime>%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}) \[%{WORD:cmdtype}\]\[%{WORD:command}\]\[%{DATA:cmdID}\](?<cmdmsg>.+)' }

		match => { 'message' => '(?<datetime>%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}) \[%{WORD:cmdtype}\]%{GREEDYDATA:netsec-text}' }

		match => { 'message' => '(?<datetime>%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}) \[%{GREEDYDATA:cmdtype}\]%{GREEDYDATA:cmdmsg}' }

		}

  }
}

filter {

  if [type] == "atlantis-container" {
        grok {

                break_on_match =>  true
                match => { 'message' => '%{SYSLOGLINE}' }

                match => { 'message' => '%{COMMONAPACHELOG}' }

                match => { 'message' => '%{COMBINEDAPACHELOG}' }

                match => { 'message' => '%{NAGIOSLOGLINE}' }

                match => { 'message' => '%{IPORHOST:clientip} (?:[a-zA-Z\.\@\-\+_%]+) (?:[a-zA-Z\.\@\-\+_%]+) \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:response} (?:%{NUMBER:bytes}|-) (?:"(?:%{URI:referrer}|-)"|%{QS:referrer}) %{QS:agent}' }

                match => { 'message' => '%{HAPROXYHTTP}' }

                match => { 'message' => '%{HAPROXYTCP}' }

                match => { 'message' => '%{HAPROXYHTTPBASE}' }

                match => { 'message' => '%{CATALINALOG' }

        }
  }
}



filter {

  if [type] == "atlantis-supervisor" {

	if [datetime] and [datetime] != "" {

		date {
		
			match => [ 'datetime', 'yyyy/MM/dd HH:mm:ss', 'dd/MMM/yyyy HH:mm:ss']
			target => '@timestamp' 
		}

	}
	
	if [cmdtype] and [cmdtype] != "" {


		if [cmdtype] == "RPC" and [command] == "HealthCheck" {
		  grok {
			match => [
				"cmdmsg", " -> region: %{GREEDYDATA:region}, zone: %{GREEDYDATA:zone}",
"cmdmsg", " -> containers: %{NUMBER:container-count:int} total, %{NUMBER:containers-used:int} used, %{NUMBER:containers-free:int} free",
"cmdmsg", " -> cpu shares: %{NUMBER:cpu-shares:int} total, %{NUMBER:cpu-shares-used:int} used, %{NUMBER:cpu-shares-free:int} free",
"cmdmsg", " -> memory: %{NUMBER:memory:int} %{WORD:mem-unit} total, %{NUMBER:memory-used:int} %{WORD:mem-used-unit} used, %{NUMBER:memory-free:int} %{WORD:mem-free-unit} free",
				"cmdmsg", " -> status: %{GREEDYDATA:status}",
				"cmdmsg" , " %{WORD:position} HealthCheck",  #' Begin HealthCheck' or ' End HealthCheck'
				"cmdmsg", "%{GREEDYDATA}"

			]
		   }

			if [position] and [position] != "" {
				
				mutate { add_field => { 'linetype' => 'RPC-HealthCheck-Position' } }

			} else if [region] and [region] != "" {

				mutate { add_field => { 'linetype' => 'RPC-HealthCheck-Region' } }

			} else if [container-count] {
				
				mutate { add_field => { 'linetype' => 'RPC-HealthCheck-Containers' } }

			} else if [cpu-shares] {

				mutate { add_field => { 'linetype' => 'RPC-HealthCheck-CPU' } }

			} else if [memory] {

				mutate { add_field => { 'linetype' => 'RPC-HealthCheck-Memory' } }

			} else if [status] {

				mutate { add_field => { 'linetype' => 'RPC-HealthCheck-Status' } }

			} else {

				mutate { add_field => { 'linetype' => 'RPC-HealthCheck-Unformatted' } }
			}
		} else if [cmdtype] == "RPC" and [command] == "Teardown" {
		    grok {
			match => [ 'cmdmsg', ' %{WORD:position} \[%{GREEDYDATA:container}\], all: %{WORD:teardown-all}',
				   'cmdmsg', '%{GREEDYDATA}'
			]
	            }

			mutate { add_field => { 'linetype' => 'RPC-Teardown' } }

		} else if [cmdtype] == "RPC" and [command] == "Deploy" {
		   grok {
			match => [ 'cmdmsg', ' %{WORD:position} %{DATA:app-name} @ %{DATA:app-sha} in %{DATA:app-env} on %{DATA:app-supervisor} -> %{DATA:container} with cpu %{NUMBER:container-cpu-shares:int} and mem %{NUMBER:container-memory:int}',
				   'cmdmsg', '%{GREEDYDATA}'
			]
	           }


			mutate { add_field => { 'linetype' => 'RPC-Deploy' } }

		} else if [cmdtype] == "RPC" {
			
			mutate { add_field => { 'linetype' => 'RPC' } }

		} else if [cmdtype] == "netsec" {
		   grok {
			match => [ 'netsec-text', '\[%{WORD:netsec-cmd}\]%{GREEDYDATA:netsec-msg}',
				   'netsec-text', '%{GREEDYDATA:netsec-msg}'
				
			]
                   }

			if [netsec-cmd] and [netsec-cmd] != "" { 

				mutate { add_field => { 'linetype' => 'netsec-exec' } }
			} else {
				
				mutate { add_field => { 'linetype' => 'netsec'  } }
			}

		} else {

			mutate { add_field => { 'linetype' => 'Unkown-cmdtype' } }

		}
	} else {

		mutate { 
			add_field => { 'linetype' => 'NoFormat' } 
			add_tag => [ 'unkown-format', 'The format is unknown for this line, update logstash-supervisor.conf' ]
		}

	}

   }
}


filter {

   if [type] == "atlantis-container" {
        grok {
                match => [ "path", "/var/log/atlantis/container/%{GREEDYDATA:container-name}/%{GREEDYDATA:app-instance-name}/%{out_type}.log" ]
        }

        if [app-instance-name] == "moxy" {

                mutate {
                        remove_field => [ "app-instance-name" ]
                        add_field => { "container-log-type" => "moxy" }
                }

        } else {
                mutate {
                        add_field => { "container-log-type" => "application_log" }
                }
        }

   }

}


output {
   if [type] == "atlantis-supervisor" {
	if [cmdtype] == 'RPC' {
                elasticsearch {
                        index => 'supervisor-rpc-%{host}'
                        host => 'ec2-54-83-111-222.compute-1.amazonaws.com'
			cluster => 'elasticsearch-atlantis'
                }
        } else if [cmdtype] == 'netsec' {
                elasticsearch {
                        index => 'supervisor-netsec-%{host}'
                        host => 'ec2-54-83-111-222.compute-1.amazonaws.com'
			cluster => 'elasticsearch-atlantis'

                }
        } else if [cmdtype] and [cmdtype] != "" {
                elasticsearch {
                        index => 'supervisor-othercmd-%{host}'
                        host => 'ec2-54-83-111-222.compute-1.amazonaws.com'
			cluster => 'elasticsearch-atlantis'

                }
        } else if !("_grokparsefailure" in [tags]) {
                elasticsearch {
                        index => 'supervisor-other-%{host}'
                        host => 'ec2-54-83-111-222.compute-1.amazonaws.com'
			cluster => 'elasticsearch-atlantis'
                }
        } else {
                elasticsearch {
                        index => 'parse-failures-supervisor-%{host}'
                        host => 'ec2-54-83-111-222.compute-1.amazonaws.com'
			cluster => 'elasticsearch-atlantis'
                }
        }
   } else if [type] == "atlantis-container" {

                elasticsearch {
                        index => 'container-%{host}'
                        host => 'ec2-54-83-111-222.compute-1.amazonaws.com'
                        cluster => 'elasticsearch-atlantis'
                }
   }
}
